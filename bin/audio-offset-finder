#!/usr/bin/python

# audio-offset-finder
#
# Copyright (c) 2014 British Broadcasting Corporation
# Copyright (c) 2018 Abram Hindle
# Copyright (c) 2019 Benjamin Knowles
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from audio_offset_finder.audio_offset_finder import find_offset, get_audio
import argparse, sys, os

def main():
    parser = argparse.ArgumentParser(
        description="Find the offset of an audio file within another one", 
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('--find-offset-of', metavar='audio file', type=str, help='Find the offset of file')
    parser.add_argument('--within', metavar='audio file', type=str, help='Within file')
    parser.add_argument('--sr', metavar='sample rate', type=int, default=16000, help='Target sample rate during downsampling')
    parser.add_argument('--trim', metavar='seconds', type=int, default=60*30, help='Only uses first n seconds of audio files')
    parser.add_argument('--plotit',action='store_true', help='Plot the correlation function')
    parser.add_argument('--ffmpeg',action='store_true', help='Run FFMPEG and make a synced copy')
    args = parser.parse_args()
    if not (args.find_offset_of or args.within):
        parser.error("Please input audio files")
    audio1 = get_audio(args.within, args.sr, args.trim)
    audio2 = get_audio(args.find_offset_of, args.sr, args.trim)
    offset, score = find_offset(audio1, audio2, args.sr, plotit=args.plotit)
    print("Offset: %s (seconds)" % str(offset))
    print("Standard score: %s" % str(score))
    ffmpeg_cmd = "ffmpeg -i '%s' -ss  '%s' -i %s -map 0:v -map 1:a  -c copy -shortest '%s.sync.%s.mkv'" % (args.find_offset_of, offset, args.within, args.find_offset_of, ("{:.2f}".format(offset)))
    print(ffmpeg_cmd)
    if (args.ffmpeg):
        os.system(ffmpeg_cmd)

if __name__ == '__main__':
    main()
